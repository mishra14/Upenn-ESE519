#include <hidef.h>      /* common defines and macros */
#include "derivative.h"      /* derivative-specific definitions */
#include "stdio.h"
#include "termio.h"

unsigned int highEdge, diff, spaceOverflow, spaceFlag, pos;
unsigned long pulseWidth, overflow;
char ch, decode;
char arr[]={'E','T','I','A','N','M','S','U','R','W','D','K','G','O','H','V','F','U','L','R','P','J','B','X','C','Y','Z','Q'};
void interrupt 10 IC2ISR(void) {
  //printf(". \n");
  TFLG1|=0x04;
  if(PTT&(0x04)) {
    PORTB|=0x40;
    highEdge = TCNT;
    overflow=0;
   } else {
    PORTB&=~(0x40);
    diff=TCNT-highEdge;
    if(TCNT<highEdge) {
     overflow-=1; 
    }
    pulseWidth=overflow *65536u + (long)diff;
    //printf("%lu\n",pulseWidth);
    pulseWidth=pulseWidth/2000;
    if(pulseWidth>30 && pulseWidth<=200) {
     ch='.'; 
     printf("%c",ch);
     PORTB |=(0x30);
     PORTB &=~(0x20);
     if(pos==-1) {
      
      pos=0; 
     } else {
      
      pos=((2*(pos+1))>=28)?pos:(2*(pos+1));
     }
     spaceOverflow=0;
     spaceFlag=1;
    } else if(pulseWidth>200) {
     ch='-'; 
     printf("%c",ch);
     PORTB |=(0x30);
     PORTB &=~(0x10);
     if(pos==-1) {
      
      pos=1; 
     } else {
      
      pos=((2*(pos+1)+1)>=28)?pos:(2*(pos+1)+1);
     }
     spaceOverflow=0;
     spaceFlag=1;
    }

   }  
}
void interrupt 16 TOFISR(void) {
 TFLG2|=0x80;
 overflow++;
 if(spaceFlag==1) {  
  spaceOverflow++;
  if(spaceOverflow==26) {
    printf("%c ",arr[pos]);
    pos=-1;
    PORTB |=(0x30);
    spaceFlag=0;
    }
 }
}
void main(void) {
   TERMIO_Init();
   DDRB|=0x70;
   PORTB|=0x70;
   DDRT&=~(0x04);
   TCTL4|=0x30;
   TIE|=0x04;
   TSCR1|=0x80;
   TSCR2|=0x80;
   overflow=0;    
   pos=-1;
   EnableInterrupts;
  while(1) {
    
  }
}
